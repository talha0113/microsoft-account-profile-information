parameters:
- name: name
  type: string
  default: ''
- name: display_name
  type: string
  default: ''
- name: source_directory
  type: string
  default: ''
- name: branch_name
  type: string
  default: 'main'
- name: main_project
  type: string
  default: ''


stages:

- stage: ${{ parameters.name }}
  displayName: ${{ parameters.display_name }}
  variables:
  - name: BuildConfiguration 
    value: 'Release'
  - name: ArtifactDirectory 
    value: '$(Build.ArtifactStagingDirectory)'
  - name: BuildNumber 
    value: '$(Build.BuildNumber)'
  
  jobs:

  - job: package
    displayName: 'Package'
    pool:
      vmImage: 'windows-latest' 
    continueOnError: 'false'
    workspace:
      clean: all
    variables:
    - name: NUGET_PACKAGES 
      value: '$(Pipeline.Workspace)/.nuget/packages'
    - name: PROJECT_ALL 
      value: '${{parameters.source_directory}}/**/*.csproj'

    steps:

    - pwsh: |
        Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
        Start-CosmosDbEmulator -NoUI -DefaultPartitionCount 100
      displayName: 'Emulator: Cosmos DB'
      failOnStderr: true
      errorActionPreference: stop
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branch_name }}'))
    
    - task: Bash@3
      displayName: 'Emulator: Storage'
      inputs:
        targetType: 'inline'
        script: |
          npm install -g azurite
          mkdir azurite
          azurite --silent --location azurite --debug azurite\debug.log &      
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branch_name }}'))


    - task: Cache@2
      displayName: 'Cache'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**,!**/publish/packages.lock.json'
        restoreKeys: |
           nuget | "$(Agent.OS)"
           nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: 'CACHE_RESTORED'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: |
          $(PROJECT_ALL)
        feedsToUse: 'select'
        noCache: false
        arguments: '--locked-mode'
      condition: ne(variables.CACHE_RESTORED, true)

    - task: DotNetCoreCLI@2
      displayName: 'Lint'
      inputs:
        command: 'custom'
        projects: |
          $(PROJECT_ALL)          
        custom: 'format'
        arguments: 'style --verify-no-changes --verbosity diagnostic --report $(ArtifactDirectory)/$(BuildNumber).json'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branch_name }}'))

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: |
          $(PROJECT_ALL)
        arguments: '--configuration $(BuildConfiguration) /p:SourceRevisionId="$(BuildNumber)"'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'        
        projects: '${{parameters.source_directory}}/**/*.tests.csproj'
        arguments: '--configuration $(BuildConfiguration) --environment DatabaseId="Subscriptions" --environment CollectionId="Items" --environment cosmosdb_connection="AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branch_name }}'))
    
    - task: PublishCodeCoverageResults@2
      displayName: 'Coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branch_name }}'))

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        zipAfterPublish: true
        projects: |
          ${{parameters.source_directory}}/**/${{parameters.main_project}}.csproj          
        arguments: '--configuration $(BuildConfiguration) --output $(ArtifactDirectory)'

    - publish: '$(ArtifactDirectory)'
      displayName: Artifact
      artifact: 'drop'