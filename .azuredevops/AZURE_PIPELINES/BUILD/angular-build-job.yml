parameters:
  name: ''
  pool: ''
  display_name: ''
  
jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.display_name }}
  pool: ${{ parameters.pool }}
  condition: succeeded()
  continueOnError: false
  workspace:
    clean: all
  
  steps:

    # Perform Tokens Replacement
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: Replace
      inputs:
        rootDirectory: Application/Source/Configurations
        targetFiles: vapid.configuration.ts

    # Perform npm Install
    - task: Npm@1
      displayName: 'Install'
      inputs:
        workingDir: Application
        verbose: false

    # Perform Angular Tests
    - task: Npm@1
      displayName: 'Test'
      inputs:
        workingDir: Application
        command: custom
        verbose: false
        customCommand: 'test'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))   

    # Attach Test Report to Azure Pipeline
    - task: PublishTestResults@2
      displayName: 'Report Tests'
      inputs:
        testRunner: NUnit
        testResultsFiles: Application/Reports/Results.xml
        mergeTestResults: true
        testRunTitle: 'Microsoft Account Profile Information'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))   

    # Attach Coverage Report to Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Report Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/Application/Reports/Coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/Application/Reports/Coverage'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest')) 

    # Perform Angular Build
    - task: Npm@1
      displayName: 'Build'
      inputs:
        workingDir: Application
        command: custom
        verbose: false
        customCommand: 'run build'

    # Copy Build Output
    - task: CopyFiles@2
      displayName: 'Copy'
      inputs:
        SourceFolder: Application/Distributions
        Contents: |
         **
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
        flattenFolders: false
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))

    # Attach Build Output to Azure Pipeline
    - task: PublishBuildArtifacts@1
      displayName: 'Publish'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: Drop
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))

    # Perform Code Security Check
    - task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@18
      displayName: 'Code Security Check'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))